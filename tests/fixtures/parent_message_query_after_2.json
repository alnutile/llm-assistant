[
    {
        "role": "system",
        "content": "Acting as the users assistant and using the following meta data included in the question please answer their question,\n                Current Date is 2023202320232023-18-10 11:10\n                Only use the functions you have been provided with if needed to help the user with this question:### End Meta Data ### \n\n\n",
        "function": null,
        "name": null
    },
    {
        "role": "user",
        "content": "Get content from this url\n\nhttps:\/\/blog.crisp.se\/2016\/01\/25\/henrikkniberg\/making-sense-of-mvp",
        "function": null,
        "name": null
    },
    {
        "role": "assistant",
        "content": "{\"name\":\"get_content_from_url\",\"content\":{\"url\":\"https:\\\/\\\/blog.crisp.se\\\/2016\\\/01\\\/25\\\/henrikkniberg\\\/making-sense-of-mvp\"}}",
        "function": null,
        "name": null
    },
    {
        "role": "function",
        "content": "Menu Making sense of MVP (Minimum Viable Product) \u2013 and why I prefer Earliest Testable\/Usable\/Lovable Posted on 2016-01-25 \u2013 12:14 A couple of years ago I drew this picture and started using it in various presentations about agile and lean development: Since then the drawing has gone viral! Shows up all over the place, in articles and presentations, even in a book (Jeff Patton\u2019s \u201c User Story Mapping \u201d \u2013 an excellent read by the way). Many tell me the drawing really captures the essence of iterative & incremental development, lean startup, MVP (minimum viable product), and what not. However, some misinterpret it, which is quite natural when you take a picture out of it\u2019s original context. Some criticize it for oversimplifying things, which is true. The picture is a metaphor. It is not about actual car development, it is about product development in general, using a car as a metaphor. Anyway, with all this buzz, I figured it\u2019s time to explain the thinking behind it. First example \u2013 Not Like This The top row illustrates a common misconception about iterative, incremental product development (a.k.a Agile). Many projects fail badly because they do Big Bang delivery (build the thing until 100% done and deliver at the end). I\u2019ve lost count of the number of failed projects I\u2019ve seen because of this (scroll down for some examples). However, when Agile is presented as an alternative people sometimes balk at the idea of delivering an unfinished product \u2013 who wants half of a car?. Imagine this: \u201cHere sir, here\u2019s our first iteration, a front tire. What do you think?\u201d Customer is like \u201cWhy the heck are you delivering a tire to me? I ordered a CAR! What am I supposed to do with this?\u201d (By the way, I\u2019m using the term \u201ccustomer\u201d here as a generic term to represent people like product managers, product owners, and early adopter users). With each delivery the product gets closer to done, but the customer is still angry because he can\u2019t actually use the product. It\u2019s still just a partial car. And finally, when the product is done, the customer is like \u201cThanks! Finally! Why didn\u2019t you just deliver this in the first place, and skip all the other useless deliveries?\u201d. In this example he\u2019s happy with the final product, because it\u2019s what he ordered. In reality, that\u2019s usually not true. A lot of time has passed without any actual user testing, so the product is most likely riddled with design flaws based on incorrect assumptions about what people need. So that smiley face at the end is pretty idealistic. Anyway, the first row represents \u201cbastardized agile\u201d. Technically it might be incremental and iterative delivery, but the absence of an actual feedback loop makes it very risky \u2013 and definitely not agile. Hence the \u201cNot Like This\u201d heading. Second example \u2013 Like this! Now for the second row. Here we take a very different approach. We start with the same context \u2013 the customer ordered a car. But this time we don\u2019t just build a car. Instead we focus on the underlying need the customer wants fulfilled. Turns out that his underlying need is \u201cI need to get from A to B faster\u201d, and Car is just one possible solution to that. Remember, car is just a metaphor, think any kind of customized product development situation. So the team delivers the smallest thing they can think of that will get the customer testing things and giving us feedback. Some might call it an MVP (Minimum Viable Product), but I prefer to call it Earliest Testable Product (more on that further down). Call it what you like (some even call their first release the \u201cthe skateboard version\u201d of the product, based on this metaphor\u2026.). The customer is unlikely to be happy with this. This is nowhere near the car he ordered. But that\u2019s OK! Here\u2019s the kicker \u2013 we\u2019re not trying to make the customer happy at this point. We might make a few early adopters happy (or pragmatists in pain ), but our main goal at this point is just to learn. Ideally, the team explains this clearly to the customer in advance, so he isn\u2019t too disappointed. However, as opposed to the front wheel in the first scenario, the skateboard is actually a usable product that helps the customer get from A to B. Not great, but a tiny bit better than nothing. So we tell the customer \u201cdon\u2019t worry, the project is not finished, this was just the first of many iterations. We\u2019re still aiming to build a car, but in the meantime please try this and give us feedback\u201c. Think big, but deliver in small functionally viable increments. We might learn some really surprising things. Suppose the customer says he hates the skateboard, we ask why, and he says \u201cI hate the color\u201d. We\u2019re like \u201cuh\u2026. the color? That\u2019s all?\u201d. And the customer says \u201cYeah, make it blue! Other than that, it\u2019s fine!\u201d. You just saved *alot* of money not building the car! Not likely, but who knows? The key question is \u201cWhat is the cheapest and fastest way we can start learning?\u201d Can we deliver something even earlier than a skateboard? How about a bus ticket? Will this help solve the customer\u2019s problem? Maybe, maybe not, but we\u2019ll definitely learn something by putting this into the hands of real users. Lean Startup offers a great model based on listing your actual hypotheses about the users and then working systematically to validate or invalidate them. You don\u2019t need to test the product on all users, and you don\u2019t need to build a product to test something. Testing a prototype on even a single user will teach you more than nothing. But OK, back to the skateboard example. After playing around with it in the office, the customer says \u201cOK, kind of fun, and it does get me to the coffee machine faster. But it\u2019s unstable. I fall off too easily\u201d. So the next iteration we try to solve that problem, or at least learn more about it. Customer can now get around the office without falling off! Happy? Not really, he still kind of wants that car. But in the meantime he is actually using this product, and giving us feedback. His biggest complaint is that it\u2019s hard to travel longer distances, like between buildings, due to the small wheels and lack of breaks. So, next release the product morphs into something like a bicycle. Now the customer can zoom around campus. Yiihaaa! We learn some things along the way: The customer likes the feeling of fresh air on his face. The customer is on a campus, and transportation is mostly about getting around between buildings. The bicycle may turn out to be a much better product than the car originally envisioned. In fact, while testing out this product we may learn that the paths are too narrow for a car anyway. We just saved the customer tons of time and money, and gave him a better product in less time! Now you may be thinking \u201cbut shouldn\u2019t we already have known that. via up-front analysis of the customer\u2019s context and needs?\u201d Good point. But in most real-life product development scenarios I\u2019ve seen, no matter how much up-front analysis you do, you\u2019re still surprised when you put the first real release into the hands of a real user, and many of your assumptions turn out to be way off. So yes, do some up-front analysis, discover as much as you can before starting development. But don\u2019t spend too much time on it and don\u2019t trust the analysis too much \u2013 start prototyping and releasing instead, that\u2019s when the real learning happens. Anyway, back to the story. Perhaps the customer wants more. Sometimes he needs to travel to another city, and the bike ride is too slow and sweaty. So next iteration we add an engine. This model is especially suitable for software, since software is, well, Soft. You can \u201cmorph\u201d the product as you go, as opposed to hardware where you essentially have to rebuild every time. However, even in hardware projects there is a huge benefit to delivering prototypes to observe and learn from how the customer uses your product. It\u2019s just that the iterations tend to be a bit longer (months instead of weeks). Even actual car companies like Toyota and Tesla do a lot of prototyping (sketches, 3d models, full-scale clay models , etc) before developing a new car model. So now what? Again, maybe the customer is happy with the motorcycle. We could end the project earlier than planned. Most products are riddled with complexity and features that nobody uses. The iterative approach is really a way of delivering less, or finding the simplest and cheapest way to solve the customer\u2019s problem. Minimize the distance to Awesome. Very Zen. Or, again, the customer could choose to continue, with or without modifications to the requirements. We may in fact end up with the exact same car as originally envisioned. However it is much more likely that we gain vital insights along the way and end up with something slightly different. Like this: The customer is overjoyed! Why? Because we learned along the way that he appreciates fresh air in his face, so we ended up with a convertible. He did get a car after all \u2013 but a better car than originally planned! So let\u2019s take a step back. What\u2019s your skateboard? The top scenario (delivering a front tire) sucks because we keep delivering stuff that the customer can\u2019t use at all. If you know what you\u2019re doing \u2013 your product has very little complexity and risk, perhaps you\u2019ve built that type of thing hundreds of times before \u2013 then go ahead and just do big bang. Build the thing and deliver it when done. However, most product development efforts I\u2019ve seen are much too complex and risky for that, and the big bang approach all too often leads to huge expensive failures. So the key question is What\u2019s your skateboard? In product development, one of the first things you should do (after describing what problem you are trying to solve for whom) is to identify your skateboard-equivalent. Think of the skateboard as a metaphor for the smallest thing you can put in the hands of real users, and get real feedback. Or use \u201cbus ticket\u201d if that metaphor works better. This will give you the vitally needed feedback loop, and will give both you and the customer control over the project \u2013 you can learn and make changes, instead of just following the plan and hoping for the best. Let\u2019s take at some real-life examples. Example 1: Spotify music player \u201cWith over 75 million users, it\u2019s hard to remember a time without Spotify. But there was. A time when we were all mulling the aisles of Target for new CDs. A time in our lives where we all became thieves on Napster. A time when iTunes forced us to buy songs for $2\/piece. And then came Spotify.\u201d \u2013 Tech Crunch Spotify is a pretty fancy product now. But it didn\u2019t start that way. I was lucky to be involved pretty early in this amazing journey (and still am). As a startup in 2006, Spotify was founded on some key assumptions \u2013 that people are happy to stream (rather than own) music, that labels and artists are willing to let people do so legally, and that fast and stable streaming is technically feasible. Remember, this was 2006 when music streaming (like Real Player) was a pretty horrible experience, and pirate-copied music was pretty much the norm. The technical part of the challenge was: \u201cIs it even possible to make a client that streams music instantly when you hit the Play button? Is it possible to get rid of that pesky \u2018Buffering\u2019 progress bar?\u201d Starting small doesn\u2019t mean you can\u2019t think big. Here\u2019s one of the early sketches of what they had in mind: But instead of spending years building the whole product, and then finding out if the assumptions hold, the developers basically sat down and hacked up a technical prototype, put in whatever ripped music they had on their laptops, and started experimenting wildly to find ways to make playback fast and stable. The driving metric was \u201chow many milliseconds does it take from when I press Play to when I hear the music?\u201d. It should play pretty much instantly, and continue playing smoothly without any stuttering! \u201cWe spent an insane amount of time focusing on latency, when no one cared, because we were hell bent on making it feel like you had all the world\u2019s music on your hard drive. Obsessing over small details can sometimes make all the difference. That\u2019s what I believe is the biggest misunderstanding about the minimum viable product concept. That is the V in the MVP.\u201d -Daniel Ek, co-founder and CEO Once they had something decent, they started testing on themselves, their family, and friends. The initial version couldn\u2019t be released to a wider audience, it was totally unpolished and had basically no features except the ability to find and play a few hard-coded songs, and there was no legal agreement or economic model. It was their skateboard. But they shamelessly put the skateboard in the hands of real users \u2013 friends and family \u2013 and they quickly got the answers they needed. Yes, it was technically possible. And yes, people absolutely loved the product (or more like, what the product can become)! The hypotheses were validated! This running prototype helped convince music labels and investors and, well, the rest is history. Example 2: Minecraft Minecraft is one of the most successful games in the history of game development, especially if you take development cost into consideration. Minecraft is also one of the most extreme examples of the release-early-and-often mindset. The first public release was made after just 6 days of coding , by one guy ! You couldn\u2019t do much in the first version \u2013 it was basically an ugly blocky 3d-landscape where you can dig up blocks and place them elsewhere to build crude structures. That was the skateboard. The users were super-engaged though (most developer-user communication happened via Twitter, pretty funny). Among the early users were me and my four kids. Over hundred releases were made during the first year. Game development is all about finding the fun (some game companies I\u2019ve worked with use the term \u201cDefinition of Fun\u201d instead of \u201cDefinition of Done\u201d), and the best way to do that is by having real people actually play that game \u2013 in this cases thousands of real people who had actually paid to try the early access version and therefore had a personal incentive to help improve the game. Gradually a small development team was formed around the game (mostly 2 guys actually), and the game became a smash hit all over the world. I don\u2019t think I\u2019ve met any kid anywhere who doesn\u2019t play Minecraft. And last year the game (well, the company that was formed around the game) was sold to Microsoft for $2.5 billion. Quite amazing. Example 3: Big Government Project Around 2010 the Swedish Police started a big initiative to enable police to spend more time in the field and less time at the station \u2013 PUST (Polisens Utrednings ST\u00f6d). A fascinating project, I was involved as coach and wrote a book about what we did and what we learned ( Lean from the Trenches ). The idea was to put laptops in the cars, and customized software to give police access to the systems they need in real-time, for example while interrogating a suspect (this was the pre-tablet age). They had tried to build similar systems in the past and failed miserably, mainly because of Big Bang thinking. They told me that one of their previous attempts took 7 years from inception to first release. SEVEN YEARS! By then of course everything had changed and the project was a total failure. So this time they wanted to do it differently. The 60-person project (later referred to as \u201cPUST Java\u201d) succeeded surprisingly well, especially for being a big government project (it even came second in CIO Awards \u201c Project of the Year \u201d). One of the main success factors was that they didn\u2019t try to build the whole thing at once \u2013 they split the elephant along two dimensions: By Region. We don\u2019t need to release to ALL of Sweden at once, we could start by releasing to just one region. By Crime type. We don\u2019t need to support ALL crime types initially, we could start by just supporting 1-2 crime types. The first version, 1.0, was their skateboard. It was a small system, supporting just a couple of crime types, and it was field-tested on a handful of cops in \u00d6sterg\u00f6tland (a region in Sweden). Other crime types had to be dealt with the old way \u2013 drive to the station and do paperwork. They knew they were guinea pigs, and that the product was nowhere near finished. But they were happy to test it, because they knew the alternative. They had seen what kind of crappy systems come out of processes that lack early user feedback, and now they finally had a chance to influence a system while it was being built! Their feedback was harsh and honest. Many of our assumptions flew out the window, and one of the big dilemmas was what to do with all the carefully crafted Use Case specifications that were getting less and less relevant as the real user feedback came in (this was an organization with a waterfall history and a habit of doing big upfront analysis). Anyway, long story short, the early feedback was channeled into product improvements and, gradually, as the those cops in \u00d6sterg\u00f6tland started liking the product, we could add more crime types and spread it to more regions. By the time we got to the big release (1.4), with nationwide rollout and training of 12000 police, we weren\u2019t all that worried. We had done so many releases, so much user testing, that we slept well on the night of the nationwide release. Unfortunately the victory was short-lived. A follow-up project (PUST Siebel) botched it and went back to waterfall-thinking, probably due to old habit. 2 years of analysis and testing without any releases or user-testing, followed by a big-bang release of the \u201cnext generation\u201d of the product to all 12,000 police at once. It was an absolute disaster, and after half a year of hemorrhaging they shut the whole thing down. The development cost was about \u20ac20 million, but Internal studies estimate that the cost to Swedish society (because the police were handicapped by the horrible system) was on the order of \u20ac1 Billion ! Pretty expensive way to learn! Example 4: Lego I\u2019m currently working at Lego , and I\u2019m amazed by their ability to deliver new smash-hits, year after year without fail. I hear lots of interesting stories about how they do this, and the common theme is prototyping and early user testing! I often see groups of kids in the office, and designers collaborate with local kindergartens and schools and families to field-test the latest product ideas. Here\u2019s a recent example \u2013 Nexo Knights (released Jan 2016): When they first started exploring this concept, they did paper prototypes and brought to small kids. The kids\u2019 first reaction was \u201chey, who are the bad guys? I can\u2019t see who\u2019s good and who\u2019s bad!\u201d. Oops. So the designers kept iterating and testing until they found a design that worked with the kids. I bet even you can see who\u2019s good and who\u2019s evil in the picture above\u2026 Not sure exactly where the skateboard is in this story, but you get the idea \u2013 early feedback from real users! Don\u2019t just design the product and build the whole thing. Imagine if they had built the product based on their original design assumptions, and learned about the problem after delivering thousands of boxes to stores all over the world! Lego also has it\u2019s share of hard-earned failures. One example is Lego Universe , a massively multiplayer online Lego world. Sounds fun huh? Problem is, they got overambitious and ended up trying to build the whole thing to perfection before releasing to the world. About 250 people worked for 4-5 years (because of constant scope creep due to perfectionism), and when the release finally came the reception was\u2026 lukewarm. The finished game was beautiful, but not as fun as expected, so the product was shut down after 2 years. There was no skateboard! Why not? Because skateboards aren\u2019t Awesome (at least not if you\u2019re expecting a car), and Lego\u2019s culture is all about delivering Awesome experiences! If you work at Lego HQ in Billund, Denmark you walk past this huge mural every day: Translates roughly to \u201cOnly the best is good enough\u201d. It has been Lego\u2019s guiding principle ever since the company started 80+ years ago, and has helped them become one of the most successful companies in the world. But in this case the principle was misapplied. The hunt for perfection delayed vital feedback, which meant mistaken assumptions about what the users like and don\u2019t like. The exact opposite of Minecraft. Interestingly enough the Lego Universe teams were actually using Scrum and iterating heavily \u2013 just like the Minecraft guys did. But the releases were only internal. So there was most likely a skateboard, and a bicycle, and so on, but those products never reached real users. That\u2019s not how Scrum is intended to be used. It was an expensive failure, but Lego learned from it and they are constantly getting better at early testing and user feedback. Improving on \u201cMVP\u201d And that (deep breath\u2026) brings me to the topic of MVP \u2013 Minimum Viable Product. The underlying idea is great, but the term itself causes a lot of confusion and angst. I\u2019ve met many customers that are like \u201cNo Way do I want an MVP delivery \u2013 that\u2019s the last delivery I\u2019ll get!\u201d All too often teams deliver the so-called Minimum Viable Product, and then quickly get whisked away to the next project, leaving the customer with a buggy, unfinished product. For some customers, MVP = MRC (Minimum Releasable Crap). I know, I know, this comes down to bad management rather than the term MVP, but still\u2026 the term invites misunderstanding. \u201cMinimum\u201d and \u201cViable\u201d mean different things to different people, and that causes problems. So here\u2019s an alternative. First of all, replace the word \u201cMinimum\u201d with \u201cEarly\u201d. The whole idea behind releasing an MVP is to get early feedback \u2013 by delivering a minimum product rather than a complete product, we can get the feedback earlier. Few customers want \u201cminimum\u201d but most customers want \u201cearly\u201d! So that\u2019s our first change: Minimum => Earliest Next, remove the word \u201cViable\u201d since it\u2019s too vague. Your \u201cviable\u201d is my \u201chorrible\u201d. Some people think Viable means \u201csomething I can test and get feedback from\u201d, others think it means \u201csomething the customer can actually use\u201d. So let\u2019s be more explicit and split it into three different things: Earliest Testable Product is the skateboard or bus ticket \u2013 the first release that customers can actually do something with. Might not solve their problem, but it generates at least some kind of feedback. We make it very clear that learning is the main purpose of this release, and that any actual customer value will be a bonus. Earliest Usable Product is perhaps the bicycle. The first release that early adopters will actually use, willingly. It is far from done, and it might not be very likeable. But it does put your customers in a better position than before. Earliest Lovable Product is perhaps the motorcycle. The first release that customers will love, tell their friends about, and be willing to pay for. There\u2019s still lots to improve, and we may still end up with a convertible, or a plane, or something else. But we\u2019ve reached the point where we have a truly marketable product. I considered adding an even earlier step \u201cEarliest Feedbackable Product\u201d, which is basically the paper prototype or equivalent that you use to get your first feedback from the customer. But four steps seems too many, and the word Feedbackable\u2026. ugh. But nevertheless, that is also an important step. Some would call a paper prototype the Earliest Testable Product, but I guess that comes down to how you define Testable. Check out Martin\u2019s MVP Guide to learn more \u2013 he\u2019s got plenty of super-concrete examples of how to get early feedback with minimum investment. Of course people can still misinterpret Earliest Testable\/Usable\/Lovable, but it\u2019s at least one step more explicit than the nebulous Minimum Viable Product. Takeaway points OK time to wrap it up. Never thought it would get this long, thanks for sticking around! Key takeaways: Avoid Big Bang delivery for complex, innovative product development. Do it iteratively and incrementally. You knew that already. But are you actually doing it? Start by identifying your skateboard \u2013 the earliest testable product. Aim for the clouds, but swallow your pride and start by delivering the skateboard. Avoid the term MVP. Be more explicit about what you\u2019re actually talking about. Earliest testable\/usable\/lovable is just one example, use whatever terms are least confusing to your stakeholders. And remember \u2013 the skateboard\/car drawing is just a metaphor. Don\u2019t take it too literally :o) PS \u2013 here\u2019s a fun story about how my kids and I used these principles to win a Robot Sumo competition :o) Thanks Mary Poppendieck, Jeff Patton, Alistair Cockburn, Anders Haugeto, Sophia, colleagues from Crisp, Spotify and Lego, and everyone else who gave tons of useful feedback. Posted on 2016-01-25 \u2013 12:14 Stan says: Hey Henrik, Firstly, thanks for this article and explanation. You made a great job on this and I would like to thank you. Secondly, I am from those who critique your metaphor and here is why: 1) There is another image with a completely wrong sense. You can find it here: https:\/\/www.linkedin.com\/nhome\/updates?topic=6093258891330609152 (also, there you can find some comments, why personally I don\u2019t like). Its a shame, that the version I shared in this link is more popular than the original image (yours). As you can compare both images, there is a big differences in user\u2019s emotions in the bottom line of the product development (in that replica user is happy with the skate, which is wrong). So this moment creates a huge misunderstanding. 2) You found the worst possible metaphor ever! Really! If our target is to build a car, why we are not watching how other people drive cars? OK, I like your bus ticket way more better, but in your example we speak about cars. How bus ticket can move me closer to the car production? (sure it will take me closer, but more to the bus creation or travel experience, rather than to the car). Hi Stan My take on your second point is that if we take it back tot he idea of User Stories we wouldn\u2019t be defining the end result of \u2018I want a car\u2019. This method wouldn\u2019t aim to engineer the solution. For example when you questioned the user more deeply their ultimate goal might be I want to be able to travel from A to B as quickly and easily as possible rather than \u2018build me a car\u2019. So the metaphor works in terms of how can we come up with the best way to get from A to B. The first iteration may not be the best but it achieves the result. The feedback and iterations then lead to the end result which may be a car. It may evolve beyond a car to some kind of flying machine perhaps a. Why do we have to stop when we have built a car? I do believe that both of you has a fair point here. BUT (obviously, there is a but. :)) I lean towards more to Stan to agree with. So the journey for the end-user is valid. She wants to go from A to B as fast as possible. True. Taking from the cost perspective this problem is harder. Do I want to develop first a prototype and a second one and a third one, etc. and as it evolves these protos are getting more and more complex. take this MVP concept in consideration and you will understand what i am talking about: very interesting statement: \u201cValidation and feedback are always more important than tweaking design features and playing with a new idea.\u201d Do you agree with this statement? Thanks in advance! In agile product development we don\u2019t start with the solution (building a car) we start with a problem to solve (be able to go to work, get 3 kids home, in less than X time, even when its rainy, [add what ever constraints you have]). It leave space for the best solutions which are not in one genius mind but as a lot more changes to be the fruit of collective intelligence. Here\u2019s another real-life example, which happens to match exactly your analogy: Better Place \u2013 https:\/\/en.wikipedia.org\/wiki\/Better_Place who attempted to build a battery-swap electric car, with a matching network of battery swap stations, and famously stated that \u201cthey won\u2019t start selling cars until the whole network of charging stations is operational\u201d, at least that\u2019s how it was stated in Israel, vs. gogoro \u2013 https:\/\/www.gogoro.com\/ who built an electric scooter, using the exact same concept, but started by deploying it only in Taipei City. The former burned through 1.5 Billion US Dollars of investors money, and crashed. The latter seems to be on the path to success, is now looking to expand beyond Taipei. In my life I did only one real MVP product. And it is a success. All other tries failed, because creating MVP is difficult. In my opinion most of us \u2013 IT boys&girls \u2013 love to create a domain, a specification, a acceptance tests scenarios, etc. I described this one success on my blog: cfp.help \u2013 my first real MVP project . I hope you find it interesting. Really enjoyed this piece, Henrik \u2013 clear, thorough, and great examples. Thanks for sharing! Great (and long) article! I still think that your image does not explain very well what a MVP is. It is not accurate if you read the definition on Lean Startup. I think the problem is the P. It stands for product but in the book it does not say it has to be a product. Two examples: your bus ticket example and Dropbox\u2019s first video. If I am not mistaken, it is clear that the FIRST MVP to build a car should not be a skate, a wheel or any other part of a vehicle. I understand the idea of the image but misleads the definition of the MVP. Fernando is correct. The MVP (as conceived by Steve Blank and Eric Ries) does not need to be anything that the custmoer can actually use. The methodology described here is Agile. Not Lean. The fact that he considered including \u201cEarliest Feedbackable Product\u201d but decided against it means that he decided against the Lean methodology and went for Agile. I asked Steve Blank (co-inventor of Lean) this exact question at a presentation he gave my organisation just a few hours ago. 1. Skateboard to Car, does it make sense? 2. Few products that I worked don\u2019t get MVP soon in first few sprints, what do I call them ? Both are answered nicely. Thanks for sharing ! YES! YES! YES! I am totally up for replacing MVP with Earliest Testable Product, for MMP being replaced by Earliest Usable Product, and Earliest Lovable Product to call out the stage that many clients consider their \u2018viable\u2019! I even had one \u2018coach\u2019 (I use that in its loosest sense) tell me to give up using MVP as you describe because \u201ceveryone uses MVP to mean the minimum product that they are happy to release\u201d. Since then I\u2019ve felt like I\u2019m beating my head against a wall. So, no more MVP for me; it\u2019s Earliest Testable Product all the way. Phew, I can give up the MVP crusade. Very informative article. The analogy is great and I agree it breaks down when taken too literally. Yet it moves the reader into a good frame of mind to understand MVP and useful iteration. My experience with new-to-the-world products is that the team is somewhat protected from the \u201cwanting a car\u201d analogy because they never heard of a car before. It\u2019s a bit easier to focus on the problem being solved and the cost of not solving the problem when the prospect can not name the solution. I think the article would be slightly more effective were the idea of \u201cordered a car\u201d dropped and the article subsequently focused on \u201cgetting from Point A to Point B\u201d. I really enjoyed reading this and I also have made the comment about what an MVP means to different stakeholders and customers, they all have their \u201cview\u201d. The hadest thing to do is to get a waterfall organisation to identify the most basic thing you can produce and get it out there, then at least you have something to get feedback on !! If it\u2019s crap, let them tell you why !!!! Learned=money well spent Let them tell you what would be better and when you get to the point of good enough, expose \u201cit\u201d more until each iteration improves \u201csomething\u201d this could be the thing or other things which are not always visible to the end user i.e. performance I will be using your example and the words \u201cearliest testable product\u201d from now on !!! Thank you for this article!! I help coach teams and I plan to use this metaphor when talking about MVP = earliest testable\/usable\/lovable product. Some questions: 1. Does this idea apply to products that have been in the marketplace for years? To use the metaphor, what happens with the next release of the car? Do you go back and deliver an MVP of Car 2.0? 2. How does this apply to products that must be \u201cperfect\u201d on the day they release? Like a security system or medical device, where there is a lot of risk to customers if they are not perfect? Thanks for this excellent post Henrik. As a product manager, the concept of MVP is one that i\u2019ve always struggled with. I think the term as you say is a by word for releasing rubbish out to the customer, and I believe that these should always be used as learning milestones. What I wanted to get your feedback on, was two things. First you mention that you MVP or ETP doesn\u2019t necessarily solve the customers problem, but isn\u2019t that the point of this first phase iteration, to essentially understand whether or not the problem is painful enough for the customer to adopt your product? Secondly, there is a thought that unless you make your \u2018MVP\/ETP\u2019 too lean, users will not engage with it, and you will never yield the results that you are truly looking for, which in turn then creates a cycle for scope creep. How do you convince stakeholders and senior management that you are releasing for testing and learning purposes. it would be interesting in hearing your thoughts about how you draw the line between an MVP\/ETP and delivering something which is engaging enough to give you evidence that you are on the right track to product delivery. This is the best explanation of the MVP idea i have heard. Totally agree, and thanks for the practical examples. Amazing! Fantastic article and explanation of concepts using visual helpful examples. Hi Henrik, I really like this post! Informative and great examples (with great potential to learn from and apply). I learned from this that the 2 most important points in any product development effort (regardless if developed in Agile or Waterfall mode) are: 1) Focus on the underlying need the customer wants fulfilled 2) Create early feedback loops (and keep them going) Thanks for delivering my daily learning point! That info available to the understanding of even the teenager, love it! Thank you. I like this kind of content. Want to add some little bit info http:\/\/mlsdev.com\/en\/blog\/50-types-of-mvp (briefly reveals the essence of the concept of \u201ctypes of mvp\u201d) This came to me JUST at the right moment \u2013 in the early stages of developing my first online course. \ud83d\ude42 I already have some beautiful testers lined up but thought I would deliver snippets of content to them to get feedback and then bundle it into a LMS on a website. After reading your article I decided to go ahead and set up a free WP site with an LMS plugin and put stuff on there for them to try it out. That way I get feedback on content and on tech issues and can then decide if I want to upgrade my site or if a simple site is my perfect bicyle\u2026 \ud83d\ude09 Great writing style and lovely imagery \u2013 I thoroughly enjoyed reading and will check out your other posts for sure! Thanks again! Would be good to have your analysis of where the Sinclair C5 micro-car (and other historical micro-cars\u2013UK, German, Japanese, even US model T) fit into the skateboard\/car spectrum and approach (why some worked and some didn\u2019t. And how to avoid getting feedback from users that they really wanted a faster horse (the famous not-quote from Henry Ford). Miles, I can try answering the second question since I\u2019m the Crisp resident User Researcher. \ud83d\ude42 When I hear people describe what they want, I\u2019ll ask them why they want it, what they would get out of having it. I try to listen for needs and motivators when they answer. When it comes to the not-quote, it\u2019s easy, they want to go faster. When digging i.e. asking why, I bet they would have answered that they needed to transport both themselves and others faster between cities so that they could spend less time travelling for services \/ with goods. So, they would need several faster horses that could carry more weight. What the solution for this might be, well, Ford was probably lucky or he did a lot of experiments (i.e. MVP\u2019s) we don\u2019t know about. Hi Henrik, Really great article! I love the illustration. It is so powerful to explain the concept of MVP. When you are working with a client, it\u2019s quite useful to use the metaphor to manage expectations about the first release. Thank you! Hi Henry, Loved this post, came across your post a few days back. As I was writing a post on \u201cTop misconceptions about Agile methodologies adoption\u201d, I have connected to your link. Also would like to seek your permission to use \u201cMaking-sense-of-MVP-23.jpg\u201d image with proper credit to your blog. Great examples! It\u2019s really creative approach and great thing about those MVPs is that you don\u2019t have to develop an App or build any sophisticated product to test your assumptions. Once, I sold a piece of paper with a map to validate my idea \ud83d\ude42 -> https:\/\/brainhub.eu\/blog\/2015\/12\/24\/what-is-mvp\/ Good article! I really enjoyed this blog on MVP resources and methodology \u2013 thanks for sharing! Might be worth adding to your article? Either way, keep up the great work! One question, how might this help with replacing an existing car? I guess it would only help if you could foster a collaborative relationship with some early users of the new system while others kept the old system (car) running until they were happy with the features. The \u2018replacing an existing car\u2019 is where I struggle with this concept. I think there are 2 options here. 1. As you say, fostering a collaborative relationship with early users is great if its something that is feasible. In this scenario I suppose you may have an Earliest Replaceable Product \u2013 the point at which the \u2018old car\u2019 can be retired. 2. Where it is not feasible to have an early adopter (e.g. replacing a processing system) you will be able to get the skateboard as your Earliest Testable Product but no matter how good you skateboard then scooter etc is, until it is better than my rusty old car then it isn\u2019t usable. In this case I actually think delivering the tyre is better. As long as I can put the tyre on my old car. If we take this approach the Earliest Testable Product may become a wooden square tyre rather than a skateboard. Followed by wooden round tyre, rubber round tyre, rubber round tyre with alloy wheels\u2026\u2026 Like everyone else that\u2019s posting though, I think this is a great article and I am assigning MVP to the bin and replacting it with ETP & EUP (using point 1 above ;). I love it. Great piece of information! It was worth reading this blog focussing on MVP techniques \u2013 thanks for such an educative share. Also, the illustrations used are extremely powerful and engaging to demonstrate the genuine concept of MVC. Do you agree with this statement? Thanks in advance! The best post about MVP! Thank you so much. I have also written about another MVP concept, it is called: \u201cFake door \u2014 The MVP before the MVP\u201d, you can rwadread about it here: This article is in reference to the article \u201cMaking sense of MVP (Minimum Viable Product) \u2013 and why I prefer Earliest Testable\/Usable\/Lovable\u201d from the website \u2013 https:\/\/blog.crisp.se\/2016\/01\/25\/henrikkniberg\/making-sense-of-mvp by \u201cHenrik\u201d in Crisp\u2019s blog Henrik\u2019s article is very informative and an excellent job by the writer; and though the example quoted is just a metaphor and should not be considered as a verbatim, I think the example of skateboard, scooter etc., misleads the perspective of MVP (or Alpha Version). I think you could have taken an alternative metaphor say for example \u201cA Wedding Cake\u201d instead of a car. Below is my view on MVP and Beta: (Please Note \u2013 I don\u2019t have very good artistic skills to draw the pictures properly, but I hope I made a sense on what I wanted to say) 1st Example \u2013 Like this!! Below are the key points: 1. In each stage of delivering a piece of code, I can get feedback on whether it meets the expectation or not (Eg: fluffiness of the cake, sweetness, flavor of the icing etc.,) and customer will still be happy with this as we are heading in a direction and delivering what customer is actually looking for. 2. In each progressive iterations, the piece of code that is delivered is according to the requirement of the customer (Eg: 1st layer of Vanilla, 2nd layer of strawberry, 3rd layer of chocolate etc.,) 3. In each stage or iteration I will try to incorporate the changes as per the feedback 4. For MVP there won\u2019t be any surprises to the customer on the product delivered 5. As MVP is characterized by minimalism (min. set of features that makes the product verifiable and saleable), in the 4th stage the stacked cake that is delivered has minimum decoration to it. 6. As a Beta version is almost the final product with all the features and characteristics (i.e., a polished and ready to go product), it has all the decorations and additional materials. 2nd Example \u2013 Not Like This!! Points to be considered: 1. In this example, I cannot get relevant feedback from a customer at each stage of delivery. 2. Here I might have a risk of whether the product delivered meets customer expectation. Eg: I would have delivered a \u201cLayer cake\u201d (as shown in the last image) instead of a \u201cStacked Cake\u201d (which customer has expected as a Wedding cake) Images and full article is available on LinkedIn : The first way of building things (products) has been followed historically. We (humans) managed to make a wheel first, a \u2018thing\u2019 which moves without much friction. Second, we connected a pair of a couple of wheels and we managed to create a carrier. Later, we figured out that we can enhance the carrier and make it more \u2018beautiful\u2019 and usable. At last, we figured that we can add an engine to the whole system which makes it move without physical effort. Saying all this, we all \u2018know\u2019 the best way to build things but it is more of the execution at the moment of time which defines your journey. I will question the business change impact of this metaphor. In the first example as bad as it looks when showing the customer various car parts (which in my opinion is not necessary but it is exaggerated in this metaphor), atleast the customer is happy doing his day to day business and will plan around getting ready when he gets the car (he needs to learn driving, get licence, arrange finances etc). In the second approach, we are giving them other means of transports where he had asked for a car. Remember, now along with him doing his daily business, which I am sure is keeping him busy, we are asking him to learn how to skateboard, learn how to cycle (and maybe invest money on buying cycling gear), buy a motorbike for few months (and learn to get licence for the same), and finally do all this for the car. If I am a customer, would I be happy in doing all those things which in the end are of no value (ok I have more skills now in case I have to skateboard again). I wanted a car, please give me a car. This is true for real life projects as well. Agile works if it meets business needs and if the time they are investing in for interim products is actually useful for the final product. customer\u2019s time is valuable, so we need to treat it with respect. The examples you gave actually supports that all interim products, Swedish police e.g., made sure that all the learnings of first iteration (i.e. one type of crime and fewer customers) are not wasted in the final product. I fully believe that this is what you mean by Agile, but the metaphor on its own without a whole article is misleading and ignores the fact that customer has a day job as well and is not available to keep learning how to use your interim products all the time. Hi Henrik, I would like to ask if there are restrictions (terms of use) in using your image (\u2018Making-sense-of-MVP-.jpg\u2019) in a post of our company\u2019s blog. Kind regards Hi Henrik, I really love your picture about lean and agile development and would like to know, if I could use it in a presentation of the German Savingsbanks Group. I would refer to you as the owner of the idea, of course. Kind regards Very helpful! This provides some good guidance to move clients, who cringe at the term Agile, away from the waterfall trap. It\u2019s so important to set expectations and show them that you have a long term plan. Very very helpful! I really appreciate you taking the time to write this, being honest and open about your experiences. Very inspirational,Keep up the killer work! Great post Henrik. I refer to this diagram a lot when working with teams. It expresses the purpose of early customer engagement really nicely. Recently I was shown a similar cartoon where the top car was the same as the bottom car and the smiles were the same magnitude. If you google MVP cartoon you\u2019ll find them. It\u2019s unfortunate that this interpretation has emerged as it seems to suggest you can take either route and get the same results. Hmmm. I was confronted with this Illustration of MVP twice within one week. To be honest, I didn\u2019t got it. In my understanding agile product development should help us incrementally create a product. By frequently releasing it and asking user for feedback, we are able to make adjustments a learn about the users needs. In my world a MVP would be an early version of my product, with only the most essential features. The first time I saw the \u201cskateboard\u201d, I immediatly thought: hey that\u2019s a prototype. I learn a lot About user expectations, but it has no single part in common with the final product. In fact, in the skateboard example the development starts 3 times from scratch. We learned a lot, we made nothing. Having made the bicycle, what would I answer when the car is ready? Don\u2019t know, not even started doing it. I think it\u2019s a good example of fail fast or prototyping, not for MVP. What can I learn from this: If I don\u2019t properly write down my acceptance criteria, I will get a skateboard instead of a car. Hmmm. I was confronted with this illustration of MVP twice within one week. To be honest, I didn\u2019t got it. In my understanding agile product development should help us incrementally create a product. By frequently releasing it and asking user for feedback, we are able to make adjustments a learn about the users needs. In my world a MVP would be an early version of my product, with only the most essential features. The first time I saw the \u201cskateboard\u201d, I immediatly thought: hey that\u2019s a prototype. I learn a lot About user expectations, but it has no single part in common with the final product. In fact, in the skateboard example the development start 3 times from scratch. We learned a lot, we made nothing. Having made the bicycle, what would I answer when the car is ready? Don\u2019t know, not even started doing it. Perhaps I may miss one or two points, but what I learn is: If I don\u2019t phrase my acceptance criteria properly, I would get a skateboard instead of a car. A MVP should be some starting point for incremental completion of the final product. If everything needs to be re-done \/ thrown away, than it was a prototype \/ fake \/ fail only. Hi, this is a super useful update to your model, and the term \u201cearly\u201d is much more palatable for senior stakeholders. I just don\u2019t understand why anyone does big bang and\/or avoids user feedback. Release early, get user feedback and evolve the product based on the feedback. I addressed the same issue from a slightly different angle: https:\/\/www.linkedin.com\/pulse\/mvp-dont-focus-m-ken-pemberton\/ Hmmm. I was confronted with this illustration of MVP twice within one week. To be honest, I didn\u2019t got it. In my understanding agile product development should help us incrementally create a product. By frequently releasing it and asking user for feedback, we are able to make adjustments a learn about the users needs. In my world a MVP would be an early version of my product, with only the most essential features. The first time I saw the \u201cskateboard\u201d, I immediatly thought: hey that\u2019s a prototype. I learn a lot About user expectations, but it has no single part in common with the final product. In fact, in the skateboard example the development start 3 times from scratch. We learned a lot, we made nothing. Having made the bicycle, what would I answer when the car is ready? Don\u2019t know, not even started doing it. Perhaps I may miss one or two points, but what I learn is: If I don\u2019t phrase my acceptance criteria properly, I would get a skateboard instead of a car. A MVP should be some starting point for incremental completion of the final product. If everything needs to be re-done \/ thrown away, than it was a prototype \/ fake \/ fail only. Hi Henrik, I would like to use the image for a presentation here at Fluor. I will name you as the source. May I use it? That\u2019s probably the best explanation of an MVP concept I\u2019ve seen so far. Some startups adopt MVP model to excuse their poor quality half-ready product. It shouldn\u2019t work like this! On each stage, the product should be usable and deliver true value! Flexibility, constant communication with your direct customer- this is the key to a successful product! Think of some world-class marketplaces like Uber or Airbnb. https:\/\/clockwise.software\/blog\/how-to-build-an-online-marketplace\/ They have started with only the basic functionality and ugly design. But their users have recognized the value! And now these are two of the most expensive companies worldwide! Hello Henrik, Thank you for a very thoughtful article. I loved it; it was very helpful- it\u2019s obvious why it is so popular. You made it easy to understand. Thank you! Hi Henrik, your picture visualises the idea of MVP in a very simple and easy to understand way. Therefore I would like to use the picture in a chapter of a book I am currently writing. Of course you will find it with due reference. Is that ok for you? KR Frank Hi Henrik, I would like to use your \u201cNot like this\u2026 Like this!\u201d diagram in a report I am writing on the purpose of iteration. May I have your permission to do so? I would of course do so with attribution to you. Hi Henrik, I also would like to use your graphic for the discussion on the sense of a MVP and it is far the best and easiest to understood visualization I\u2019ve ever seen. I would of course place a link to this blog post and refer to you as the author of the drawing. Is this ok for you? Hi Henrik, I just wanted to say that I\u2019ve just re-read this article again \u2013 I reckon I do it twice a year every year \u2013 and have sent it on to the new founder I\u2019m working with to help try and explain what we\u2019re trying to achieve by working the way we do, and get him contributing to the process instead of lamenting the lack of the \u201cdream\u201d product that exists in his head. This is still a fantastically useful article, so I wanted to say thanks for sharing! Thanks in advance! So: What\u2019s the cost in terms of rework for transforming a scooter into a bike, or a motorcycle into a car. You need a better analogy. Hi Henrik, would like to use your graphic for a blog post in my company, as it explains the MVP very well. Can I use it, of course with a reference to the original blog post? Good afternoon Henrik! Really like this model, it connects with people very well. I would like to seek permission to use this in some internal materials for our Design and Innovation teams. Would, of course, reference your blog with proper attribution!! Hi Henrik, really like this model! I connects very well with people. I would like to use this image in some internal materials for our Design and Innovation teams (will proper attribution of course). Thanks!! Hi Henrik, I would like to use the image for a Linkedin post on Iterative development. Could I use the image? I will be sure to reference this you and this post in the caption. Thanks for working at giving more definition around this problem \u2013 I think the observations of customer sentiment are spot on. I feel Eric Ries is extremely emphatic that the method of using Agile *Discovery* (and the backing \u201cinnovation accounting\u201d methodology that proves progress) \u2013 is not applicable to \u201cWell Known\u201d problem domains which generally have Well Known Solutions. He even advocates mainstreaming Lean Startup products into regular accounts as they become part of the \u201cwell known\u201d problem \/ solution landscape of a market. To summarize how this affects this article: \u201cSomeone comparing 10 cars to your car will feel the same toward the skateboard as they feel to the \u2018wheel\u2019. Why? Because cars are a \u201cWell Known Problem Domain\u201d. In well known problem domains, agile discovery can be wasteful because it is seeking to define the already well defined. When companies build \u201cgenre defining\u201d products (unknown problem domains) \u2013 customers don\u2019t know what they want (or IF they want anything) and builders don\u2019t know what to build \u2013 so the expensive Agile Discovery and it\u2019s Innovation Accounting are the most productive way forward. Agile **Build** methods (versus discovery) can be used to build things in both well known and unknown problem domains \u2013 but in well known problem domains there will be a cost to not spiking efforts to get to de facto market expectations (well known solutions) as quickly as possible. One of those is a lack of interest in engaging as an early adopter to give feedback \u2013 as pointed out in this article. Can we please reuse this image in a BCS Publishing, book with full reference.? May I use the main MVP image above in a BCS Publishing book with full acknowledgement please? how much MVP should be like final product? 25% or 40%? A MVP in this case is that I can walk, what more do I need, well to make me lazy but do things faster than I would do with my two hands and legs. And so on\u2026 The author has a nice picture of a product development or Software Life Cycle (evolution of a project). The second picture that author concentrates is after the first was the aim, but not sure how to. Its like computers 10 or 20 years ago and now what they can do. A few KB disc drives to terrabyte storage drives that are much smaller. An effort is an effort, and an MVP is a usable product that could not be compromised at any cost. \ud83d\ude00 Hi Henrik, What is the best way to build things, but it is much more the in-the-moment execution that defines your trajectory\u2026I\u2019d like to understand if I can use it in a lean and agile presentation. I love your image about agile and lean moving forward and would like to understand if I can use it in a presentation of the Savings Bank Set. Best regards Reality is: Skateboard \ud83d\ude42 Scooter \ud83d\ude42 Bicycle \ud83d\ude42 Motorbike \ud83d\ude42 Car \ud83d\ude41 The concept of iterative development is not lost, none-the-less the example is at odds with reality. Such a nice post. I wanna add that you\u2019re trying to solve it for is to identify your skateboard equivalent think of the skateboard as a metaphor for the smallest thing you can put in the hands of real users and get real feedback or use a bus ticket if that metaphor works better for you this will give you the vitally needed feedback loop and will give both you and your customer control over the project you can learn and make changes instead of just following the plan and hoping for the best I have thought so many times of entering the blogging world as I love reading them. I think I finally have the courage to give it a try. Thank you so much for all of the ideas! The information here is very helpful about skateboard. Knowing these makes it much easier to use. I am very happy to know that. It was nice to see all the information come together in one place. This blog is too good. Specially the information about best skateboard are too good. All this are looking too good Sometimes you know the idea and you see it in your dream, but something stop you to achieve it, when you find someone take your hand show you the way, you feel happy. thanks for the valuable knowledge, information and for the way of thinking. I\u2019m so glad to have found the author of the wonderful image that agile practitioners keep putting in front of me. It\u2019s ok \u2013 only just that its the bicycle that is the most perfect way to get from a to b\u2026 \u201cSome might call it an MVP (Minimum Viable Product), but I prefer to call it Earliest Testable Product (more on that further down).\u201d Back in the 1970s, and through my career, we referred to this as Ugly Version First\u2026 Its very old\u2026 when i employed this at my last job, and a ancilary project failed, and the management decided to put everyone aside hoping losing corporate intelligence, cohesion, and such would be better\u2026 though they never did get rid of the problem which was an overeducated (harvard yale) management who looked down on everyone\u2026 and listened to no one. even if they came from a high school with 8 nobel prizes, fields medals, etc. Given they were soooo in on crisis, they did not notice my work. then came time to fire me, and all my projects were suddenly mission critical and the guys at the top could not figure out how i did that\u2026 I said Ugly Version First\u2026 they liked a very ugly screen that did what they want and got improvements over time\u2026 it ended up lean and mean\u2026 and produced over 900 reports on demand, and delivered them to email inboxes just before they arrived at work\u2026. managment prior to that did this with a manual sustem that lost reports, dropped them, etc\u2026 Too bad for them I am now doing similar for DOD contracting. I wont say what eventually happened to them but at least i moved, got a house, increased my salary, etc. And yet. Harvard and Yale think laying off a really good programmer with 40 years experience spanning mainframes, medical research, etc. in favor of complacent job jockies who dont program when they leave work\u2026 is some form of punishment\u2026 how so? Hey Henrik, This article is beneficial. Thank you so much. I also shared this with my team and business partners to explain an anology. Spotify invests tens of millions of dollars into a microservice architecture that results in much smaller codebases and a higher degree of modularity. The end result is feature development can be significantly different then traditional enterprise\/monorepo setups at the cost of large devops teams orchestrating these services together. Minecraft was in Alpha\/Beta for a very long period of time and as (originally) a offline-game used a client based architecture versus the traditional client\/server architecture of many software projects. For these reasons, and more, those example aren\u2019t really supporting the premise of the article. I actually largely agree with some of the overarching themes, but these are cherrypicked examples that don\u2019t survive scrutiny. Comment * Name * Email * Website Save my name, email, and website in this browser for the next time I comment. \u0394",
        "function": null,
        "name": "get_content_from_url"
    }
]