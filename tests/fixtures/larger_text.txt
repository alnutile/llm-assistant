Skip to content Toggle navigation Sign up Product Actions Automate any workflow Packages Host and manage packages Security Find and fix vulnerabilities Codespaces Instant dev environments Copilot Write better code with AI Code review Manage code changes Issues Plan and track work Discussions Collaborate outside of code Explore All features Documentation GitHub Skills Blog Solutions For Enterprise Teams Startups Education By Solution CI/CD & Automation DevOps DevSecOps Resources Customer Stories White papers, Ebooks, Webinars Partners Open Source GitHub Sponsors Fund open source developers The ReadME Project GitHub community articles Repositories Topics Trending Collections Pricing Search or jump to... Search code, repositories, users, issues, pull requests... Search Clear Search syntax tips Provide feedback We read every piece of feedback, and take your input very seriously. Include my email address so I can be contacted Cancel Submit feedback Saved searches Use saved searches to filter your results more quickly Name Query To see all available qualifiers, see our documentation. Cancel Create saved search Sign in Sign up You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session. You switched accounts on another tab or window. Reload to refresh your session. {{ message }} forxer / laravel-gravatar Public Notifications Fork 7 Star 33 Easy Gravatar integration in a Laravel project. License MIT license 33 stars 7 forks Activity Star Notifications Code Issues 0 Pull requests 0 Actions Projects 0 Security Insights More Code Issues Pull requests Actions Projects Security Insights forxer/laravel-gravatar This commit does not belong to any branch on this repository, and may belong to a fork outside of the repository. master Switch branches/tags Branches Tags Could not load branches Nothing to show {{ refName }} default View all branches Could not load tags Nothing to show {{ refName }} default View all tags Name already in use A tag already exists with the provided branch name. Many Git commands accept both tag and branch names, so creating this branch may cause unexpected behavior. Are you sure you want to create this branch? Cancel Create 4 branches 16 tags Code Local Codespaces Clone HTTPS GitHub CLI Use Git or checkout with SVN using the web URL. Work fast with our official CLI. Learn more about the CLI. Open with GitHub Desktop Download ZIP Sign In Required Please sign in to use Codespaces. Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Launching GitHub Desktop If nothing happens, download GitHub Desktop and try again. Launching Xcode If nothing happens, download Xcode and try again. Launching Visual Studio Code Your codespace will open once ready. There was a problem preparing your codespace, please try again. Latest commit forxer fix date … b425f33 Mar 22, 2023 fix date b425f33 Git stats 41 commits Files Permalink Failed to load latest commit information. Type Name Latest commit message Commit time config ready for 3.0 March 22, 2023 15:12 src ready for 3.0 March 22, 2023 15:12 .gitignore WIP 2.0.0 March 17, 2023 13:49 .php-cs-fixer.dist.php WIP 2.0.0 March 17, 2023 13:49 CHANGELOG.md fix date March 22, 2023 15:14 LICENSE Initial commit August 7, 2017 12:50 README.md ready for 3.0 March 22, 2023 15:12 UPGRADE.md ready for 3.0 March 22, 2023 15:12 composer.json ready for 3.0 March 22, 2023 15:12 View code Gravatar for Laravel Index Requirements Installation Usage Retrieve instances Show directly in your views Mandatory parameter Optional parameters Gravatar image size Default Gravatar image Gravatar image max rating Gravatar image file-type extension Force to always use the default image Combine them Image presets Casts README.md Gravatar for Laravel This package provides an easy Gravatar integration in a Laravel project. This package is built on top of forxer/Gravatar. If you want to dig deeper, you can find additional information on its README file. $avatar = gravatar('email@example.com') ->size(120) ->defaultImage('robohash') ->extension('jpg'); //... echo $avatar; Index Requirements Installation Usage Retrieve instances Show directly in your views Mandatory parameter Optional parameters Gravatar image size Default Gravatar image Gravatar image max rating Gravatar image file-type extension Force to always use the default image Combine them Image presets Casts Requirements PHP 8.0 or newer Laravel 8.0 or newer If you want to use it with a version earlier than PHP 8 and/or a version earlier than Laravel 8, please use version 1. Installation Install through composer: composer require forxer/laravel-gravatar Usage There are three ways to use this library: With the gravatar() helper fonction With the facade Gravatar::create() Or by injecting the LaravelGravatar\Gravatar service All of these ways return an instance of the LaravelGravatar\Gravatar service. The Gravatar service has 3 main methods : image() which return an instance of LaravelGravatar\Image wich extends Gravatar\Image from forxer/Gravatar avatar() which is an alias of the first profile() which return an instance of LaravelGravatar\Profile wich extends Gravatar\Profile from forxer/Gravatar This instances of LaravelGravatar\Image and LaravelGravatar\Profile allow you to define specific settings/parameters as needed. So you can use them to build Gravatar images/profiles URL. Whatever method you use, you could use the url() method to retrieve it. Or display the URL directly because they implement the __toString() method. Retrieve instances With the helper $gravatar = gravatar(); // LaravelGravatar\Gravatar instance $avatar = gravatar('email@example.com'); // LaravelGravatar\Image instance $avatar = gravatar()->image('email@example.com'); // LaravelGravatar\Image instance $avatar = gravatar()->avatar('email@example.com'); // LaravelGravatar\Image instance $profile = gravatar()->profile('email@example.com'); // LaravelGravatar\Profile instance Or with the facade: use LaravelGravatar\Facades\Gravatar; $gravatar = Gravatar::create(); // LaravelGravatar\Gravatar instance $avatar = Gravatar::image('email@example.com'); // LaravelGravatar\Image instance $avatar = Gravatar::avatar('email@example.com'); // LaravelGravatar\Image instance $profile = Gravatar::profile('email@example.com'); // LaravelGravatar\Profile instance Or with the service injection: use App\Models\User; use LaravelGravatar\Gravatar as Gravatar; class UserController { public function show(User $user, Gravatar $gravatar) { $avatar = $gravatar->avatar($user->email); $profile = $gravatar->profile($user->email); } } Show directly in your views <img src="{{ gravatar('email@example.com') }}"> <img src="{{ Gravatar::avatar('email@example.com') }}"> <img src="{{ $avatar }}"> Back to top ^ Mandatory parameter Obviously the email address is a mandatory parameter that can be entered in different ways. // pass it as argument of the helper $gravatarImage = gravatar($email); // or use the `setEmail()` method $gravatarImage = gravatar(); $gravatarImage->setEmail($email); // or the `email()` helper method $gravatarImage = gravatar(); $gravatarImage->email($email); These previous examples are also valid for the profile. Back to top ^ Optional parameters In all the examples below we will use the helper but it obviously works with the facade or the dependency injection of the service. Gravatar image size By default, images are presented at 80px by 80px if no size parameter is supplied. You may request a specific image size, which will be dynamically delivered from Gravatar. You may request images anywhere from 1px up to 2048px, however note that many users have lower resolution images, so requesting larger sizes may result in pixelation/low-quality images. An avatar size should be an integer representing the size in pixels. // use the `setSize()` method $gravatarImage = gravatar($email); $gravatarImage->setSize(120); // or the `size()` helper method $gravatarImage = gravatar($email); $gravatarImage->size(120); // or its alias `s()` (as in the generated query string) $gravatarImage = gravatar($email); $gravatarImage->s(120); Back to top ^ Default Gravatar image What happens when an email address has no matching Gravatar image or when the gravatar specified exceeds your maximum allowed content rating? By default, this: If you'd prefer to use your own default image, then you can easily do so by supplying the URL to an image. In addition to allowing you to use your own image, Gravatar has a number of built in options which you can also use as defaults. Most of these work by taking the requested email hash and using it to generate a themed image that is unique to that email address. To use these options, just pass one of the following keywords: '404': do not load any image if none is associated with the email hash, instead return an HTTP 404 (File Not Found) response 'mp': (mystery-person) a simple, cartoon-style silhouetted outline of a person (does not vary by email hash) 'identicon': a geometric pattern based on an email hash 'monsterid': a generated 'monster' with different colors, faces, etc 'wavatar': generated faces with differing features and backgrounds 'retro': awesome generated, 8-bit arcade-style pixelated faces 'robohash': a generated robot with different colors, faces, etc 'blank': a transparent PNG image // use the `setDefaultImage()` method $gravatarImage = gravatar($email); $gravatarImage->setDefaultImage('mp'); // or the `defaultImage()` helper method $gravatarImage = gravatar($email); $gravatarImage->defaultImage('mp'); // or its alias `d()` (as in the generated query string) $gravatarImage = gravatar($email); $gravatarImage->d('mp'); Back to top ^ Gravatar image max rating Gravatar allows users to self-rate their images so that they can indicate if an image is appropriate for a certain audience. By default, only 'g' rated images are displayed unless you indicate that you would like to see higher ratings. You may specify one of the following ratings to request images up to and including that rating: 'g': suitable for display on all websites with any audience type. 'pg': may contain rude gestures, provocatively dressed individuals, the lesser swear words, or mild violence. 'r': may contain such things as harsh profanity, intense violence, nudity, or hard drug use. 'x': may contain hardcore sexual imagery or extremely disturbing violence. // use the `setMaxRating()` method $gravatarImage = gravatar($email); $gravatarImage->setMaxRating('g'); // or the `maxRating()` helper method $gravatarImage = gravatar($email); $gravatarImage->maxRating('g'); // or its alias `r()` (as in the generated query string) $gravatarImage = gravatar($email); $gravatarImage->r('g'); Back to top ^ Gravatar image file-type extension If you require a file-type extension (some places do) then you may also specify it. You can specify one of the following extensions for the generated URL: 'jpg' 'jpeg' 'gif' 'png' 'webp' // use the `setExtension()` method $gravatarImage = gravatar($email); $gravatarImage->setExtension('jpg'); // or the `extension()` helper method $gravatarImage = gravatar($email); $gravatarImage->extension('jpg'); // or its alias `e()` (as in the generated query string) $gravatarImage = gravatar($email); $gravatarImage->e('jpg'); Back to top ^ Force to always use the default image If for some reason you wanted to force the default image to always be load, you can do it: // use the `setForceDefault()` method $gravatarImage = gravatar($email); $gravatarImage->setForceDefault(true); // or the `forceDefault()` helper method $gravatarImage = gravatar($email); $gravatarImage->forceDefault(true); // or its alias `f()` (as in the generated query string) $gravatarImage = gravatar($email); $gravatarImage->f(true); // or use the `enableForceDefault()` method $gravatarImage = gravatar($email); $gravatarImage->setForceDefault(true); To check to see if you are forcing default image, call the method forcingDefault() of LaravelGravatar\Image, which will return a boolean value regarding whether or not forcing default is enabled. $gravatarImage = gravatar(); $gravatarImage->enableForceDefault(); //... $gravatarImage->forcingDefault(); // true //... $gravatarImage->disableForceDefault(); //... $gravatarImage->forcingDefault(); // false Back to top ^ Combine them You can combine them seamlessly: $avatar = gravatar('email@example.com') ->size(120) ->rating('pg') ->defaultImage('robohash') ->extension('jpg'); Back to top ^ Image presets It is possible to define groups of defaults parameters, known as presets. This is helpful if you have standard settings that you use throughout your application. In the configuration file, you can define as many gravatar presets as you wish and a default preset to be used. First, publish the config file of the package using artisan: php artisan vendor:publish --tag="gravatar-config" And define some presets in the configuration file in the 'presets' array. There are a few predefined presets for the example in the configuration file, but you are of course free to delete them and define ones that suit your needs. For example: 'my_default' => [ 'size' => 80, 'default_image' => 'mp', 'max_rating' => 'g', 'extension' => 'webp', ], 'small' => [ 'size' => 40, 'extension' => 'jpg', ], 'medium' => [ 'size' => 120, 'extension' => 'jpg', ], 'large' => [ 'size' => 360, 'default_image' => 'robohash', 'max_rating' => 'pg', ], In the configuration file, for the values key name, as these are array keys and we follow naming conventions, you can use either: 'size' or 's' 'default_image' or 'd' 'max_rating' or 'r' 'extension' or 'e' 'force_default' or 'f' If you wish you can default to one of these presets at the top of the configuration file. 'default_preset' => 'my_default', Then, use it in your application with the second argument: $gravatarImage = gravatar($email, 'small'); $gravatarImage = gravatar()->image($email, 'medium'); $gravatarImage = Gravatar::image($email, 'large'); Or you can set it later after instantiation: // use the `setPreset()` method $gravatarImage = gravatar($email); $gravatarImage->setPreset('small'); // or the `preset()` helper method $gravatarImage = gravatar($email); $gravatarImage->preset('small'); Back to top ^ Casts Let's imagine that your user model has a column "gravatar" which represents the email to use. You can cast this attribute to directly obtain an instance of LaravelGravatar\Image: use LaravelGravatar\Casts\GravatarImage; class Post extends Model { protected $casts = [ 'gravatar' => GravatarImage::class, ]; } Thus it is easy to access the instance and manipulate it: use App\Models\User; class UserController { public function show(User $user) { $user->gravatar->preset('small'); return view('users.show', [ 'user' => $user, ]); } } You can even define a preset name to be used when casting by appending it's name to the cast: use LaravelGravatar\Casts\GravatarImage; class Post extends Model { protected $casts = [ 'gravatar' => GravatarImage::class.':small', ]; } You can also cast to an instance of LaravelGravatar\Profile: use LaravelGravatar\Casts\GravatarProfile; class Post extends Model { protected $casts = [ 'gravatar' => GravatarProfile::class, ]; } Back to top ^ About Easy Gravatar integration in a Laravel project. Topics laravel gravatar Resources Readme License MIT license Activity Stars 33 stars Watchers 3 watching Forks 7 forks Report repository Releases 16 3.0.0 Latest Mar 22, 2023 + 15 releases Used by 39 + 31 Contributors 4 forxer Vincent Garnier Limych Andrey "Limych" Khrolenok mbalandis Marty Balandis code2prog C2P Languages PHP 100.0% Footer © 2023 GitHub, Inc. Footer navigation Terms Privacy Security Status Docs Contact GitHub Pricing API Training Blog About You can’t perform that action at this time.
